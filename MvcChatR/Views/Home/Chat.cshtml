                                                                                                                                                                                                                                                                                           @{
    ViewBag.Title = "Chat";
}
<article class="row">
    <section class="col-md-4">
        <h2>Discussion</h2>
        <ul id="discussion"></ul>
    </section>
    <section class="col-md-4">
        <h2>Chat</h2>        
        <input type="hidden" id="displayname" />
        <div class="form-group">
            <label for="message">Message</label>
            <input type="text" class="form-control" id="message" placeholder="Enter a message.">
        </div>
        <div class="form-group">
            <a class="btn btn-default" id="sendmessage">Send</a>
        </div>
        <hr/>
        <h4>Join Group</h4>
        <input type="hidden" id="displayname" />
        <div class="form-group">
            <label for="group">Group Name</label>
            <input type="text" class="form-control" id="groupname" placeholder="Group Name.">
        </div>
        <div class="form-group">
            <a class="btn btn-default" id="joingroup">Join</a>
        </div>
    </section>
    <section class="col-md-4">
        <h2>Group</h2>
        <ul id="group"></ul>
    </section>
</article>
@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.0.2.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->
    <script>
        $(function() {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Introduce method to count
            var count = 0;

            // Create a function to notify that the message was sent
            chat.client.notifyMessageSent = function() {
                /* THIS CODE CREATES AN INFINITE LOOP
                $.connection.hub.start({ transport: ['webSockets', 'longPolling'] }).done(function() {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                });
                */
            };

            chat.client.notifyWrongVersion = function() {
                console.log("wrong version number");
            };


            // Create a function that the hub can call back to display messages.
            chat.client.addNewMessageToPage = function(name, message) {
                // Add the message to the page.
                $('#discussion').append('<li class="' + count + '_' + name + '"><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');

                // Send message to user directly.

                count++;
            };



            // add new group message to page
            chat.client.addNewGroupMessageToPage = function (name, message) {
                // Add the message to the page.
                $('#group').append('<li class="' + count + '_' + name + '"><strong>' + htmlEncode(name)
                    + '</strong>: ' + htmlEncode(message) + '</li>');

                // Send message to user directly.
                //count++;
            }; 




            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();

            //Set a query string value before calling the start method (with the generated proxy)
            $.connection.hub.qs = { 'version': '1.0' };

            //Enable logging (with the generated proxy)
            $.connection.hub.logging = true;

            // Start the connection.
            $.connection.hub.start({ transport: ['webSockets', 'longPolling'] }).done(function() {

                //Client code that displays the transport method used by a connection (with the generated proxy)
                console.log("Connected, transport = " + $.connection.hub.transport.name);
                chat.server.starting($('#displayname').val());
                //
                //How to handle connection lifetime events
                //starting: Raised before any data is sent over the connection.
                $.connection.hub.starting(function() {
                    console.log('starting: Raised before any data is sent over the connection.');

                });
                //received: Raised when any data is received on the connection. Provides the received data.
                $.connection.hub.received(function(e) {
                    console.log('received: Raised when any data is received on the connection. Provides the received data.');
                });
                //connectionSlow: Raised when the client detects a slow or frequently dropping connection.
                $.connection.hub.connectionSlow(function() {
                    console.log('connectionSlow: Raised when the client detects a slow or frequently dropping connection.');
                });
                //reconnecting: Raised when the underlying transport begins reconnecting.
                $.connection.hub.reconnecting(function() {
                    console.log('reconnecting: Raised when the underlying transport begins reconnecting.');
                });
                //reconnected: Raised when the underlying transport has reconnected.
                $.connection.hub.reconnected(function() {
                    console.log('reconnected: Raised when the underlying transport has reconnected.');
                });
                //stateChanged: Raised when the connection state changes. Provides the old state and the new state (Connecting, Connected, Reconnecting, or Disconnected).
                $.connection.hub.stateChanged(function() {
                    console.log('stateChanged: Raised when the connection state changes. Provides the old state and the new state (Connecting, Connected, Reconnecting, or Disconnected).');
                });
                //disconnected: Raised when the connection has disconnected.
                $.connection.hub.disconnected(function() {
                    console.log('disconnected: Raised when the connection has disconnected.');
                });

                // Listen to Click Events
                clickEvents();

            });

            $.connection.hub.error(function(error) {
                console.log('SignalR error: ' + error);
            });

            // function block for click events
            var clickEvents = function() {
                // send the message
                $('#sendmessage').click(function() {
                    // Call the Send method on the hub.
                    chat.server.all($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
                // join a group
                $("#joingroup").on('click', function() {
                    // get the form field
                    var groupname = $("#groupname").val();
                    // Call JoinGroup method on the hub.
                    chat.server.joinGroup(groupname);
                });
            };
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }


    </script>
}